/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';




declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface AttributeBasicRoot {

    }

    interface AttributeBasic {
      'customAttr': string;
      'multiWord': string;
      'single': string;
    }

    interface AttributeBooleanRoot {
      'toggleState': () => void;
    }

    interface AttributeBoolean {
      'boolState': boolean;
      'noreflect': boolean;
      'strState': string;
    }

    interface AttributeComplex {
      'bool0': boolean;
      'bool1': boolean;
      'bool2': boolean;
      'getInstance': () => this;
      'nu0': number;
      'nu1': number;
      'str0': string;
      'str1': string;
    }

    interface AttributeHost {

    }

    interface ConditionalBasic {

    }

    interface ConditionalRerenderRoot {

    }

    interface ConditionalRerender {

    }

    interface CssVariablesRoot {

    }

    interface CssVariables {

    }

    interface DynamicImport {
      'update': () => Promise<void>;
    }

    interface EsmImport {
      'propVal': number;
      'someMethod': () => void;
    }

    interface InitCssRoot {

    }

    interface KeyReorderRoot {

    }

    interface KeyReorder {
      'num': number;
    }

    interface LifecycleBasicA {

    }

    interface LifecycleBasicB {
      'value': string;
    }

    interface LifecycleBasicC {
      'value': string;
    }

    interface LifecycleUnloadA {

    }

    interface LifecycleUnloadB {

    }

    interface LifecycleUnloadRoot {

    }

    interface ReflectToAttr {
      'bool': boolean;
      'dynamicNu': number;
      'dynamicStr': string;
      'nu': number;
      'null': string;
      'otherBool': boolean;
      'str': string;
      'undef': string;
    }

    interface ShadowDomArrayRoot {

    }

    interface ShadowDomArray {
      'values': number[];
    }

    interface ShadowDomBasicRoot {

    }

    interface ShadowDomBasic {

    }

    interface ShadowDomSlotBasic {

    }

    interface ShadowDomSlotNestedRoot {

    }

    interface ShadowDomSlotNested {
      'i': number;
    }

    interface SlotArrayBasic {

    }

    interface SlotArrayComplexRoot {

    }

    interface SlotArrayComplex {

    }

    interface SlotArrayTop {

    }

    interface SlotBasicOrderRoot {

    }

    interface SlotBasicOrder {

    }

    interface SlotBasicRoot {

    }

    interface SlotBasic {

    }

    interface SlotDynamicWrapperRoot {

    }

    interface SlotDynamicWrapper {
      'tag': string;
    }

    interface SlotFallbackRoot {

    }

    interface SlotFallback {
      'inc': number;
    }

    interface SlotHtml {
      'inc': number;
    }

    interface SlotLightDomRoot {

    }

    interface SlotLightDomContent {

    }

    interface SlotMapOrderRoot {

    }

    interface SlotMapOrder {

    }

    interface SlotReorderRoot {

    }

    interface SlotReorder {
      'reordered': boolean;
    }

    interface SlotReplaceWrapperRoot {

    }

    interface SlotReplaceWrapper {
      'href': string;
    }

    interface CssCmp {

    }

    interface SassCmp {

    }

    interface SvgAttr {

    }

    interface SvgClass {

    }

    interface Tag3dComponent {

    }

    interface Tag88 {

    }
  }


    interface HTMLAttributeBasicRootElement extends StencilComponents.AttributeBasicRoot, HTMLStencilElement {}

    var HTMLAttributeBasicRootElement: {
      prototype: HTMLAttributeBasicRootElement;
      new (): HTMLAttributeBasicRootElement;
    };
    

    interface HTMLAttributeBasicElement extends StencilComponents.AttributeBasic, HTMLStencilElement {}

    var HTMLAttributeBasicElement: {
      prototype: HTMLAttributeBasicElement;
      new (): HTMLAttributeBasicElement;
    };
    

    interface HTMLAttributeBooleanRootElement extends StencilComponents.AttributeBooleanRoot, HTMLStencilElement {}

    var HTMLAttributeBooleanRootElement: {
      prototype: HTMLAttributeBooleanRootElement;
      new (): HTMLAttributeBooleanRootElement;
    };
    

    interface HTMLAttributeBooleanElement extends StencilComponents.AttributeBoolean, HTMLStencilElement {}

    var HTMLAttributeBooleanElement: {
      prototype: HTMLAttributeBooleanElement;
      new (): HTMLAttributeBooleanElement;
    };
    

    interface HTMLAttributeComplexElement extends StencilComponents.AttributeComplex, HTMLStencilElement {}

    var HTMLAttributeComplexElement: {
      prototype: HTMLAttributeComplexElement;
      new (): HTMLAttributeComplexElement;
    };
    

    interface HTMLAttributeHostElement extends StencilComponents.AttributeHost, HTMLStencilElement {}

    var HTMLAttributeHostElement: {
      prototype: HTMLAttributeHostElement;
      new (): HTMLAttributeHostElement;
    };
    

    interface HTMLConditionalBasicElement extends StencilComponents.ConditionalBasic, HTMLStencilElement {}

    var HTMLConditionalBasicElement: {
      prototype: HTMLConditionalBasicElement;
      new (): HTMLConditionalBasicElement;
    };
    

    interface HTMLConditionalRerenderRootElement extends StencilComponents.ConditionalRerenderRoot, HTMLStencilElement {}

    var HTMLConditionalRerenderRootElement: {
      prototype: HTMLConditionalRerenderRootElement;
      new (): HTMLConditionalRerenderRootElement;
    };
    

    interface HTMLConditionalRerenderElement extends StencilComponents.ConditionalRerender, HTMLStencilElement {}

    var HTMLConditionalRerenderElement: {
      prototype: HTMLConditionalRerenderElement;
      new (): HTMLConditionalRerenderElement;
    };
    

    interface HTMLCssVariablesRootElement extends StencilComponents.CssVariablesRoot, HTMLStencilElement {}

    var HTMLCssVariablesRootElement: {
      prototype: HTMLCssVariablesRootElement;
      new (): HTMLCssVariablesRootElement;
    };
    

    interface HTMLCssVariablesElement extends StencilComponents.CssVariables, HTMLStencilElement {}

    var HTMLCssVariablesElement: {
      prototype: HTMLCssVariablesElement;
      new (): HTMLCssVariablesElement;
    };
    

    interface HTMLDynamicImportElement extends StencilComponents.DynamicImport, HTMLStencilElement {}

    var HTMLDynamicImportElement: {
      prototype: HTMLDynamicImportElement;
      new (): HTMLDynamicImportElement;
    };
    

    interface HTMLEsmImportElement extends StencilComponents.EsmImport, HTMLStencilElement {}

    var HTMLEsmImportElement: {
      prototype: HTMLEsmImportElement;
      new (): HTMLEsmImportElement;
    };
    

    interface HTMLInitCssRootElement extends StencilComponents.InitCssRoot, HTMLStencilElement {}

    var HTMLInitCssRootElement: {
      prototype: HTMLInitCssRootElement;
      new (): HTMLInitCssRootElement;
    };
    

    interface HTMLKeyReorderRootElement extends StencilComponents.KeyReorderRoot, HTMLStencilElement {}

    var HTMLKeyReorderRootElement: {
      prototype: HTMLKeyReorderRootElement;
      new (): HTMLKeyReorderRootElement;
    };
    

    interface HTMLKeyReorderElement extends StencilComponents.KeyReorder, HTMLStencilElement {}

    var HTMLKeyReorderElement: {
      prototype: HTMLKeyReorderElement;
      new (): HTMLKeyReorderElement;
    };
    

    interface HTMLLifecycleBasicAElement extends StencilComponents.LifecycleBasicA, HTMLStencilElement {}

    var HTMLLifecycleBasicAElement: {
      prototype: HTMLLifecycleBasicAElement;
      new (): HTMLLifecycleBasicAElement;
    };
    

    interface HTMLLifecycleBasicBElement extends StencilComponents.LifecycleBasicB, HTMLStencilElement {}

    var HTMLLifecycleBasicBElement: {
      prototype: HTMLLifecycleBasicBElement;
      new (): HTMLLifecycleBasicBElement;
    };
    

    interface HTMLLifecycleBasicCElement extends StencilComponents.LifecycleBasicC, HTMLStencilElement {}

    var HTMLLifecycleBasicCElement: {
      prototype: HTMLLifecycleBasicCElement;
      new (): HTMLLifecycleBasicCElement;
    };
    

    interface HTMLLifecycleUnloadAElement extends StencilComponents.LifecycleUnloadA, HTMLStencilElement {}

    var HTMLLifecycleUnloadAElement: {
      prototype: HTMLLifecycleUnloadAElement;
      new (): HTMLLifecycleUnloadAElement;
    };
    

    interface HTMLLifecycleUnloadBElement extends StencilComponents.LifecycleUnloadB, HTMLStencilElement {}

    var HTMLLifecycleUnloadBElement: {
      prototype: HTMLLifecycleUnloadBElement;
      new (): HTMLLifecycleUnloadBElement;
    };
    

    interface HTMLLifecycleUnloadRootElement extends StencilComponents.LifecycleUnloadRoot, HTMLStencilElement {}

    var HTMLLifecycleUnloadRootElement: {
      prototype: HTMLLifecycleUnloadRootElement;
      new (): HTMLLifecycleUnloadRootElement;
    };
    

    interface HTMLReflectToAttrElement extends StencilComponents.ReflectToAttr, HTMLStencilElement {}

    var HTMLReflectToAttrElement: {
      prototype: HTMLReflectToAttrElement;
      new (): HTMLReflectToAttrElement;
    };
    

    interface HTMLShadowDomArrayRootElement extends StencilComponents.ShadowDomArrayRoot, HTMLStencilElement {}

    var HTMLShadowDomArrayRootElement: {
      prototype: HTMLShadowDomArrayRootElement;
      new (): HTMLShadowDomArrayRootElement;
    };
    

    interface HTMLShadowDomArrayElement extends StencilComponents.ShadowDomArray, HTMLStencilElement {}

    var HTMLShadowDomArrayElement: {
      prototype: HTMLShadowDomArrayElement;
      new (): HTMLShadowDomArrayElement;
    };
    

    interface HTMLShadowDomBasicRootElement extends StencilComponents.ShadowDomBasicRoot, HTMLStencilElement {}

    var HTMLShadowDomBasicRootElement: {
      prototype: HTMLShadowDomBasicRootElement;
      new (): HTMLShadowDomBasicRootElement;
    };
    

    interface HTMLShadowDomBasicElement extends StencilComponents.ShadowDomBasic, HTMLStencilElement {}

    var HTMLShadowDomBasicElement: {
      prototype: HTMLShadowDomBasicElement;
      new (): HTMLShadowDomBasicElement;
    };
    

    interface HTMLShadowDomSlotBasicElement extends StencilComponents.ShadowDomSlotBasic, HTMLStencilElement {}

    var HTMLShadowDomSlotBasicElement: {
      prototype: HTMLShadowDomSlotBasicElement;
      new (): HTMLShadowDomSlotBasicElement;
    };
    

    interface HTMLShadowDomSlotNestedRootElement extends StencilComponents.ShadowDomSlotNestedRoot, HTMLStencilElement {}

    var HTMLShadowDomSlotNestedRootElement: {
      prototype: HTMLShadowDomSlotNestedRootElement;
      new (): HTMLShadowDomSlotNestedRootElement;
    };
    

    interface HTMLShadowDomSlotNestedElement extends StencilComponents.ShadowDomSlotNested, HTMLStencilElement {}

    var HTMLShadowDomSlotNestedElement: {
      prototype: HTMLShadowDomSlotNestedElement;
      new (): HTMLShadowDomSlotNestedElement;
    };
    

    interface HTMLSlotArrayBasicElement extends StencilComponents.SlotArrayBasic, HTMLStencilElement {}

    var HTMLSlotArrayBasicElement: {
      prototype: HTMLSlotArrayBasicElement;
      new (): HTMLSlotArrayBasicElement;
    };
    

    interface HTMLSlotArrayComplexRootElement extends StencilComponents.SlotArrayComplexRoot, HTMLStencilElement {}

    var HTMLSlotArrayComplexRootElement: {
      prototype: HTMLSlotArrayComplexRootElement;
      new (): HTMLSlotArrayComplexRootElement;
    };
    

    interface HTMLSlotArrayComplexElement extends StencilComponents.SlotArrayComplex, HTMLStencilElement {}

    var HTMLSlotArrayComplexElement: {
      prototype: HTMLSlotArrayComplexElement;
      new (): HTMLSlotArrayComplexElement;
    };
    

    interface HTMLSlotArrayTopElement extends StencilComponents.SlotArrayTop, HTMLStencilElement {}

    var HTMLSlotArrayTopElement: {
      prototype: HTMLSlotArrayTopElement;
      new (): HTMLSlotArrayTopElement;
    };
    

    interface HTMLSlotBasicOrderRootElement extends StencilComponents.SlotBasicOrderRoot, HTMLStencilElement {}

    var HTMLSlotBasicOrderRootElement: {
      prototype: HTMLSlotBasicOrderRootElement;
      new (): HTMLSlotBasicOrderRootElement;
    };
    

    interface HTMLSlotBasicOrderElement extends StencilComponents.SlotBasicOrder, HTMLStencilElement {}

    var HTMLSlotBasicOrderElement: {
      prototype: HTMLSlotBasicOrderElement;
      new (): HTMLSlotBasicOrderElement;
    };
    

    interface HTMLSlotBasicRootElement extends StencilComponents.SlotBasicRoot, HTMLStencilElement {}

    var HTMLSlotBasicRootElement: {
      prototype: HTMLSlotBasicRootElement;
      new (): HTMLSlotBasicRootElement;
    };
    

    interface HTMLSlotBasicElement extends StencilComponents.SlotBasic, HTMLStencilElement {}

    var HTMLSlotBasicElement: {
      prototype: HTMLSlotBasicElement;
      new (): HTMLSlotBasicElement;
    };
    

    interface HTMLSlotDynamicWrapperRootElement extends StencilComponents.SlotDynamicWrapperRoot, HTMLStencilElement {}

    var HTMLSlotDynamicWrapperRootElement: {
      prototype: HTMLSlotDynamicWrapperRootElement;
      new (): HTMLSlotDynamicWrapperRootElement;
    };
    

    interface HTMLSlotDynamicWrapperElement extends StencilComponents.SlotDynamicWrapper, HTMLStencilElement {}

    var HTMLSlotDynamicWrapperElement: {
      prototype: HTMLSlotDynamicWrapperElement;
      new (): HTMLSlotDynamicWrapperElement;
    };
    

    interface HTMLSlotFallbackRootElement extends StencilComponents.SlotFallbackRoot, HTMLStencilElement {}

    var HTMLSlotFallbackRootElement: {
      prototype: HTMLSlotFallbackRootElement;
      new (): HTMLSlotFallbackRootElement;
    };
    

    interface HTMLSlotFallbackElement extends StencilComponents.SlotFallback, HTMLStencilElement {}

    var HTMLSlotFallbackElement: {
      prototype: HTMLSlotFallbackElement;
      new (): HTMLSlotFallbackElement;
    };
    

    interface HTMLSlotHtmlElement extends StencilComponents.SlotHtml, HTMLStencilElement {}

    var HTMLSlotHtmlElement: {
      prototype: HTMLSlotHtmlElement;
      new (): HTMLSlotHtmlElement;
    };
    

    interface HTMLSlotLightDomRootElement extends StencilComponents.SlotLightDomRoot, HTMLStencilElement {}

    var HTMLSlotLightDomRootElement: {
      prototype: HTMLSlotLightDomRootElement;
      new (): HTMLSlotLightDomRootElement;
    };
    

    interface HTMLSlotLightDomContentElement extends StencilComponents.SlotLightDomContent, HTMLStencilElement {}

    var HTMLSlotLightDomContentElement: {
      prototype: HTMLSlotLightDomContentElement;
      new (): HTMLSlotLightDomContentElement;
    };
    

    interface HTMLSlotMapOrderRootElement extends StencilComponents.SlotMapOrderRoot, HTMLStencilElement {}

    var HTMLSlotMapOrderRootElement: {
      prototype: HTMLSlotMapOrderRootElement;
      new (): HTMLSlotMapOrderRootElement;
    };
    

    interface HTMLSlotMapOrderElement extends StencilComponents.SlotMapOrder, HTMLStencilElement {}

    var HTMLSlotMapOrderElement: {
      prototype: HTMLSlotMapOrderElement;
      new (): HTMLSlotMapOrderElement;
    };
    

    interface HTMLSlotReorderRootElement extends StencilComponents.SlotReorderRoot, HTMLStencilElement {}

    var HTMLSlotReorderRootElement: {
      prototype: HTMLSlotReorderRootElement;
      new (): HTMLSlotReorderRootElement;
    };
    

    interface HTMLSlotReorderElement extends StencilComponents.SlotReorder, HTMLStencilElement {}

    var HTMLSlotReorderElement: {
      prototype: HTMLSlotReorderElement;
      new (): HTMLSlotReorderElement;
    };
    

    interface HTMLSlotReplaceWrapperRootElement extends StencilComponents.SlotReplaceWrapperRoot, HTMLStencilElement {}

    var HTMLSlotReplaceWrapperRootElement: {
      prototype: HTMLSlotReplaceWrapperRootElement;
      new (): HTMLSlotReplaceWrapperRootElement;
    };
    

    interface HTMLSlotReplaceWrapperElement extends StencilComponents.SlotReplaceWrapper, HTMLStencilElement {}

    var HTMLSlotReplaceWrapperElement: {
      prototype: HTMLSlotReplaceWrapperElement;
      new (): HTMLSlotReplaceWrapperElement;
    };
    

    interface HTMLCssCmpElement extends StencilComponents.CssCmp, HTMLStencilElement {}

    var HTMLCssCmpElement: {
      prototype: HTMLCssCmpElement;
      new (): HTMLCssCmpElement;
    };
    

    interface HTMLSassCmpElement extends StencilComponents.SassCmp, HTMLStencilElement {}

    var HTMLSassCmpElement: {
      prototype: HTMLSassCmpElement;
      new (): HTMLSassCmpElement;
    };
    

    interface HTMLSvgAttrElement extends StencilComponents.SvgAttr, HTMLStencilElement {}

    var HTMLSvgAttrElement: {
      prototype: HTMLSvgAttrElement;
      new (): HTMLSvgAttrElement;
    };
    

    interface HTMLSvgClassElement extends StencilComponents.SvgClass, HTMLStencilElement {}

    var HTMLSvgClassElement: {
      prototype: HTMLSvgClassElement;
      new (): HTMLSvgClassElement;
    };
    

    interface HTMLTag3dComponentElement extends StencilComponents.Tag3dComponent, HTMLStencilElement {}

    var HTMLTag3dComponentElement: {
      prototype: HTMLTag3dComponentElement;
      new (): HTMLTag3dComponentElement;
    };
    

    interface HTMLTag88Element extends StencilComponents.Tag88, HTMLStencilElement {}

    var HTMLTag88Element: {
      prototype: HTMLTag88Element;
      new (): HTMLTag88Element;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'attribute-basic-root': JSXElements.AttributeBasicRootAttributes;
    'attribute-basic': JSXElements.AttributeBasicAttributes;
    'attribute-boolean-root': JSXElements.AttributeBooleanRootAttributes;
    'attribute-boolean': JSXElements.AttributeBooleanAttributes;
    'attribute-complex': JSXElements.AttributeComplexAttributes;
    'attribute-host': JSXElements.AttributeHostAttributes;
    'conditional-basic': JSXElements.ConditionalBasicAttributes;
    'conditional-rerender-root': JSXElements.ConditionalRerenderRootAttributes;
    'conditional-rerender': JSXElements.ConditionalRerenderAttributes;
    'css-variables-root': JSXElements.CssVariablesRootAttributes;
    'css-variables': JSXElements.CssVariablesAttributes;
    'dynamic-import': JSXElements.DynamicImportAttributes;
    'esm-import': JSXElements.EsmImportAttributes;
    'init-css-root': JSXElements.InitCssRootAttributes;
    'key-reorder-root': JSXElements.KeyReorderRootAttributes;
    'key-reorder': JSXElements.KeyReorderAttributes;
    'lifecycle-basic-a': JSXElements.LifecycleBasicAAttributes;
    'lifecycle-basic-b': JSXElements.LifecycleBasicBAttributes;
    'lifecycle-basic-c': JSXElements.LifecycleBasicCAttributes;
    'lifecycle-unload-a': JSXElements.LifecycleUnloadAAttributes;
    'lifecycle-unload-b': JSXElements.LifecycleUnloadBAttributes;
    'lifecycle-unload-root': JSXElements.LifecycleUnloadRootAttributes;
    'reflect-to-attr': JSXElements.ReflectToAttrAttributes;
    'shadow-dom-array-root': JSXElements.ShadowDomArrayRootAttributes;
    'shadow-dom-array': JSXElements.ShadowDomArrayAttributes;
    'shadow-dom-basic-root': JSXElements.ShadowDomBasicRootAttributes;
    'shadow-dom-basic': JSXElements.ShadowDomBasicAttributes;
    'shadow-dom-slot-basic': JSXElements.ShadowDomSlotBasicAttributes;
    'shadow-dom-slot-nested-root': JSXElements.ShadowDomSlotNestedRootAttributes;
    'shadow-dom-slot-nested': JSXElements.ShadowDomSlotNestedAttributes;
    'slot-array-basic': JSXElements.SlotArrayBasicAttributes;
    'slot-array-complex-root': JSXElements.SlotArrayComplexRootAttributes;
    'slot-array-complex': JSXElements.SlotArrayComplexAttributes;
    'slot-array-top': JSXElements.SlotArrayTopAttributes;
    'slot-basic-order-root': JSXElements.SlotBasicOrderRootAttributes;
    'slot-basic-order': JSXElements.SlotBasicOrderAttributes;
    'slot-basic-root': JSXElements.SlotBasicRootAttributes;
    'slot-basic': JSXElements.SlotBasicAttributes;
    'slot-dynamic-wrapper-root': JSXElements.SlotDynamicWrapperRootAttributes;
    'slot-dynamic-wrapper': JSXElements.SlotDynamicWrapperAttributes;
    'slot-fallback-root': JSXElements.SlotFallbackRootAttributes;
    'slot-fallback': JSXElements.SlotFallbackAttributes;
    'slot-html': JSXElements.SlotHtmlAttributes;
    'slot-light-dom-root': JSXElements.SlotLightDomRootAttributes;
    'slot-light-dom-content': JSXElements.SlotLightDomContentAttributes;
    'slot-map-order-root': JSXElements.SlotMapOrderRootAttributes;
    'slot-map-order': JSXElements.SlotMapOrderAttributes;
    'slot-reorder-root': JSXElements.SlotReorderRootAttributes;
    'slot-reorder': JSXElements.SlotReorderAttributes;
    'slot-replace-wrapper-root': JSXElements.SlotReplaceWrapperRootAttributes;
    'slot-replace-wrapper': JSXElements.SlotReplaceWrapperAttributes;
    'css-cmp': JSXElements.CssCmpAttributes;
    'sass-cmp': JSXElements.SassCmpAttributes;
    'svg-attr': JSXElements.SvgAttrAttributes;
    'svg-class': JSXElements.SvgClassAttributes;
    'tag-3d-component': JSXElements.Tag3dComponentAttributes;
    'tag-88': JSXElements.Tag88Attributes;
    }
  }

  namespace JSXElements {

    export interface AttributeBasicRootAttributes extends HTMLAttributes {

    }

    export interface AttributeBasicAttributes extends HTMLAttributes {
      'customAttr'?: string;
      'multiWord'?: string;
      'single'?: string;
    }

    export interface AttributeBooleanRootAttributes extends HTMLAttributes {

    }

    export interface AttributeBooleanAttributes extends HTMLAttributes {
      'boolState'?: boolean;
      'noreflect'?: boolean;
      'strState'?: string;
    }

    export interface AttributeComplexAttributes extends HTMLAttributes {
      'bool0'?: boolean;
      'bool1'?: boolean;
      'bool2'?: boolean;
      'nu0'?: number;
      'nu1'?: number;
      'str0'?: string;
      'str1'?: string;
    }

    export interface AttributeHostAttributes extends HTMLAttributes {

    }

    export interface ConditionalBasicAttributes extends HTMLAttributes {

    }

    export interface ConditionalRerenderRootAttributes extends HTMLAttributes {

    }

    export interface ConditionalRerenderAttributes extends HTMLAttributes {

    }

    export interface CssVariablesRootAttributes extends HTMLAttributes {

    }

    export interface CssVariablesAttributes extends HTMLAttributes {

    }

    export interface DynamicImportAttributes extends HTMLAttributes {

    }

    export interface EsmImportAttributes extends HTMLAttributes {
      'onSomeEvent'?: (event: CustomEvent) => void;
      'propVal'?: number;
    }

    export interface InitCssRootAttributes extends HTMLAttributes {

    }

    export interface KeyReorderRootAttributes extends HTMLAttributes {

    }

    export interface KeyReorderAttributes extends HTMLAttributes {
      'num'?: number;
    }

    export interface LifecycleBasicAAttributes extends HTMLAttributes {

    }

    export interface LifecycleBasicBAttributes extends HTMLAttributes {
      'onLifecycleLoad'?: (event: CustomEvent) => void;
      'onLifecycleUpdate'?: (event: CustomEvent) => void;
      'value'?: string;
    }

    export interface LifecycleBasicCAttributes extends HTMLAttributes {
      'onLifecycleLoad'?: (event: CustomEvent) => void;
      'onLifecycleUpdate'?: (event: CustomEvent) => void;
      'value'?: string;
    }

    export interface LifecycleUnloadAAttributes extends HTMLAttributes {

    }

    export interface LifecycleUnloadBAttributes extends HTMLAttributes {

    }

    export interface LifecycleUnloadRootAttributes extends HTMLAttributes {

    }

    export interface ReflectToAttrAttributes extends HTMLAttributes {
      'bool'?: boolean;
      'dynamicNu'?: number;
      'dynamicStr'?: string;
      'nu'?: number;
      'null'?: string;
      'otherBool'?: boolean;
      'str'?: string;
      'undef'?: string;
    }

    export interface ShadowDomArrayRootAttributes extends HTMLAttributes {

    }

    export interface ShadowDomArrayAttributes extends HTMLAttributes {
      'values'?: number[];
    }

    export interface ShadowDomBasicRootAttributes extends HTMLAttributes {

    }

    export interface ShadowDomBasicAttributes extends HTMLAttributes {

    }

    export interface ShadowDomSlotBasicAttributes extends HTMLAttributes {

    }

    export interface ShadowDomSlotNestedRootAttributes extends HTMLAttributes {

    }

    export interface ShadowDomSlotNestedAttributes extends HTMLAttributes {
      'i'?: number;
    }

    export interface SlotArrayBasicAttributes extends HTMLAttributes {

    }

    export interface SlotArrayComplexRootAttributes extends HTMLAttributes {

    }

    export interface SlotArrayComplexAttributes extends HTMLAttributes {

    }

    export interface SlotArrayTopAttributes extends HTMLAttributes {

    }

    export interface SlotBasicOrderRootAttributes extends HTMLAttributes {

    }

    export interface SlotBasicOrderAttributes extends HTMLAttributes {

    }

    export interface SlotBasicRootAttributes extends HTMLAttributes {

    }

    export interface SlotBasicAttributes extends HTMLAttributes {

    }

    export interface SlotDynamicWrapperRootAttributes extends HTMLAttributes {

    }

    export interface SlotDynamicWrapperAttributes extends HTMLAttributes {
      'tag'?: string;
    }

    export interface SlotFallbackRootAttributes extends HTMLAttributes {

    }

    export interface SlotFallbackAttributes extends HTMLAttributes {
      'inc'?: number;
    }

    export interface SlotHtmlAttributes extends HTMLAttributes {
      'inc'?: number;
    }

    export interface SlotLightDomRootAttributes extends HTMLAttributes {

    }

    export interface SlotLightDomContentAttributes extends HTMLAttributes {

    }

    export interface SlotMapOrderRootAttributes extends HTMLAttributes {

    }

    export interface SlotMapOrderAttributes extends HTMLAttributes {

    }

    export interface SlotReorderRootAttributes extends HTMLAttributes {

    }

    export interface SlotReorderAttributes extends HTMLAttributes {
      'reordered'?: boolean;
    }

    export interface SlotReplaceWrapperRootAttributes extends HTMLAttributes {

    }

    export interface SlotReplaceWrapperAttributes extends HTMLAttributes {
      'href'?: string;
    }

    export interface CssCmpAttributes extends HTMLAttributes {

    }

    export interface SassCmpAttributes extends HTMLAttributes {

    }

    export interface SvgAttrAttributes extends HTMLAttributes {

    }

    export interface SvgClassAttributes extends HTMLAttributes {

    }

    export interface Tag3dComponentAttributes extends HTMLAttributes {

    }

    export interface Tag88Attributes extends HTMLAttributes {

    }
  }

  interface HTMLElementTagNameMap {
    'attribute-basic-root': HTMLAttributeBasicRootElement
    'attribute-basic': HTMLAttributeBasicElement
    'attribute-boolean-root': HTMLAttributeBooleanRootElement
    'attribute-boolean': HTMLAttributeBooleanElement
    'attribute-complex': HTMLAttributeComplexElement
    'attribute-host': HTMLAttributeHostElement
    'conditional-basic': HTMLConditionalBasicElement
    'conditional-rerender-root': HTMLConditionalRerenderRootElement
    'conditional-rerender': HTMLConditionalRerenderElement
    'css-variables-root': HTMLCssVariablesRootElement
    'css-variables': HTMLCssVariablesElement
    'dynamic-import': HTMLDynamicImportElement
    'esm-import': HTMLEsmImportElement
    'init-css-root': HTMLInitCssRootElement
    'key-reorder-root': HTMLKeyReorderRootElement
    'key-reorder': HTMLKeyReorderElement
    'lifecycle-basic-a': HTMLLifecycleBasicAElement
    'lifecycle-basic-b': HTMLLifecycleBasicBElement
    'lifecycle-basic-c': HTMLLifecycleBasicCElement
    'lifecycle-unload-a': HTMLLifecycleUnloadAElement
    'lifecycle-unload-b': HTMLLifecycleUnloadBElement
    'lifecycle-unload-root': HTMLLifecycleUnloadRootElement
    'reflect-to-attr': HTMLReflectToAttrElement
    'shadow-dom-array-root': HTMLShadowDomArrayRootElement
    'shadow-dom-array': HTMLShadowDomArrayElement
    'shadow-dom-basic-root': HTMLShadowDomBasicRootElement
    'shadow-dom-basic': HTMLShadowDomBasicElement
    'shadow-dom-slot-basic': HTMLShadowDomSlotBasicElement
    'shadow-dom-slot-nested-root': HTMLShadowDomSlotNestedRootElement
    'shadow-dom-slot-nested': HTMLShadowDomSlotNestedElement
    'slot-array-basic': HTMLSlotArrayBasicElement
    'slot-array-complex-root': HTMLSlotArrayComplexRootElement
    'slot-array-complex': HTMLSlotArrayComplexElement
    'slot-array-top': HTMLSlotArrayTopElement
    'slot-basic-order-root': HTMLSlotBasicOrderRootElement
    'slot-basic-order': HTMLSlotBasicOrderElement
    'slot-basic-root': HTMLSlotBasicRootElement
    'slot-basic': HTMLSlotBasicElement
    'slot-dynamic-wrapper-root': HTMLSlotDynamicWrapperRootElement
    'slot-dynamic-wrapper': HTMLSlotDynamicWrapperElement
    'slot-fallback-root': HTMLSlotFallbackRootElement
    'slot-fallback': HTMLSlotFallbackElement
    'slot-html': HTMLSlotHtmlElement
    'slot-light-dom-root': HTMLSlotLightDomRootElement
    'slot-light-dom-content': HTMLSlotLightDomContentElement
    'slot-map-order-root': HTMLSlotMapOrderRootElement
    'slot-map-order': HTMLSlotMapOrderElement
    'slot-reorder-root': HTMLSlotReorderRootElement
    'slot-reorder': HTMLSlotReorderElement
    'slot-replace-wrapper-root': HTMLSlotReplaceWrapperRootElement
    'slot-replace-wrapper': HTMLSlotReplaceWrapperElement
    'css-cmp': HTMLCssCmpElement
    'sass-cmp': HTMLSassCmpElement
    'svg-attr': HTMLSvgAttrElement
    'svg-class': HTMLSvgClassElement
    'tag-3d-component': HTMLTag3dComponentElement
    'tag-88': HTMLTag88Element
  }

  interface ElementTagNameMap {
    'attribute-basic-root': HTMLAttributeBasicRootElement;
    'attribute-basic': HTMLAttributeBasicElement;
    'attribute-boolean-root': HTMLAttributeBooleanRootElement;
    'attribute-boolean': HTMLAttributeBooleanElement;
    'attribute-complex': HTMLAttributeComplexElement;
    'attribute-host': HTMLAttributeHostElement;
    'conditional-basic': HTMLConditionalBasicElement;
    'conditional-rerender-root': HTMLConditionalRerenderRootElement;
    'conditional-rerender': HTMLConditionalRerenderElement;
    'css-variables-root': HTMLCssVariablesRootElement;
    'css-variables': HTMLCssVariablesElement;
    'dynamic-import': HTMLDynamicImportElement;
    'esm-import': HTMLEsmImportElement;
    'init-css-root': HTMLInitCssRootElement;
    'key-reorder-root': HTMLKeyReorderRootElement;
    'key-reorder': HTMLKeyReorderElement;
    'lifecycle-basic-a': HTMLLifecycleBasicAElement;
    'lifecycle-basic-b': HTMLLifecycleBasicBElement;
    'lifecycle-basic-c': HTMLLifecycleBasicCElement;
    'lifecycle-unload-a': HTMLLifecycleUnloadAElement;
    'lifecycle-unload-b': HTMLLifecycleUnloadBElement;
    'lifecycle-unload-root': HTMLLifecycleUnloadRootElement;
    'reflect-to-attr': HTMLReflectToAttrElement;
    'shadow-dom-array-root': HTMLShadowDomArrayRootElement;
    'shadow-dom-array': HTMLShadowDomArrayElement;
    'shadow-dom-basic-root': HTMLShadowDomBasicRootElement;
    'shadow-dom-basic': HTMLShadowDomBasicElement;
    'shadow-dom-slot-basic': HTMLShadowDomSlotBasicElement;
    'shadow-dom-slot-nested-root': HTMLShadowDomSlotNestedRootElement;
    'shadow-dom-slot-nested': HTMLShadowDomSlotNestedElement;
    'slot-array-basic': HTMLSlotArrayBasicElement;
    'slot-array-complex-root': HTMLSlotArrayComplexRootElement;
    'slot-array-complex': HTMLSlotArrayComplexElement;
    'slot-array-top': HTMLSlotArrayTopElement;
    'slot-basic-order-root': HTMLSlotBasicOrderRootElement;
    'slot-basic-order': HTMLSlotBasicOrderElement;
    'slot-basic-root': HTMLSlotBasicRootElement;
    'slot-basic': HTMLSlotBasicElement;
    'slot-dynamic-wrapper-root': HTMLSlotDynamicWrapperRootElement;
    'slot-dynamic-wrapper': HTMLSlotDynamicWrapperElement;
    'slot-fallback-root': HTMLSlotFallbackRootElement;
    'slot-fallback': HTMLSlotFallbackElement;
    'slot-html': HTMLSlotHtmlElement;
    'slot-light-dom-root': HTMLSlotLightDomRootElement;
    'slot-light-dom-content': HTMLSlotLightDomContentElement;
    'slot-map-order-root': HTMLSlotMapOrderRootElement;
    'slot-map-order': HTMLSlotMapOrderElement;
    'slot-reorder-root': HTMLSlotReorderRootElement;
    'slot-reorder': HTMLSlotReorderElement;
    'slot-replace-wrapper-root': HTMLSlotReplaceWrapperRootElement;
    'slot-replace-wrapper': HTMLSlotReplaceWrapperElement;
    'css-cmp': HTMLCssCmpElement;
    'sass-cmp': HTMLSassCmpElement;
    'svg-attr': HTMLSvgAttrElement;
    'svg-class': HTMLSvgClassElement;
    'tag-3d-component': HTMLTag3dComponentElement;
    'tag-88': HTMLTag88Element;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;